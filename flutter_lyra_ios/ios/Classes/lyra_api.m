// Autogenerated from Pigeon (v7.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "lyra_api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObject(NSDictionary *dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface ErrorCodesInterface ()
+ (ErrorCodesInterface *)fromList:(NSArray *)list;
+ (nullable ErrorCodesInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LyraInitializeOptionsInterface ()
+ (LyraInitializeOptionsInterface *)fromList:(NSArray *)list;
+ (nullable LyraInitializeOptionsInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LyraKeyInterface ()
+ (LyraKeyInterface *)fromList:(NSArray *)list;
+ (nullable LyraKeyInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ProcessRequestInterface ()
+ (ProcessRequestInterface *)fromList:(NSArray *)list;
+ (nullable ProcessRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation ErrorCodesInterface
+ (instancetype)makeWithPaymentCancelledByUser:(NSString *)paymentCancelledByUser {
  ErrorCodesInterface* pigeonResult = [[ErrorCodesInterface alloc] init];
  pigeonResult.paymentCancelledByUser = paymentCancelledByUser;
  return pigeonResult;
}
+ (ErrorCodesInterface *)fromList:(NSArray *)list {
  ErrorCodesInterface *pigeonResult = [[ErrorCodesInterface alloc] init];
  pigeonResult.paymentCancelledByUser = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.paymentCancelledByUser != nil, @"");
  return pigeonResult;
}
+ (nullable ErrorCodesInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ErrorCodesInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.paymentCancelledByUser ?: [NSNull null]),
  ];
}
@end

@implementation LyraInitializeOptionsInterface
+ (instancetype)makeWithApiServerName:(NSString *)apiServerName
    nfcEnabled:(nullable NSNumber *)nfcEnabled
    cardScanningEnabled:(nullable NSNumber *)cardScanningEnabled
    applePayMerchantId:(nullable NSString *)applePayMerchantId
    applePayMerchantName:(nullable NSString *)applePayMerchantName {
  LyraInitializeOptionsInterface* pigeonResult = [[LyraInitializeOptionsInterface alloc] init];
  pigeonResult.apiServerName = apiServerName;
  pigeonResult.nfcEnabled = nfcEnabled;
  pigeonResult.cardScanningEnabled = cardScanningEnabled;
  pigeonResult.applePayMerchantId = applePayMerchantId;
  pigeonResult.applePayMerchantName = applePayMerchantName;
  return pigeonResult;
}
+ (LyraInitializeOptionsInterface *)fromList:(NSArray *)list {
  LyraInitializeOptionsInterface *pigeonResult = [[LyraInitializeOptionsInterface alloc] init];
  pigeonResult.apiServerName = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.apiServerName != nil, @"");
  pigeonResult.nfcEnabled = GetNullableObjectAtIndex(list, 1);
  pigeonResult.cardScanningEnabled = GetNullableObjectAtIndex(list, 2);
  pigeonResult.applePayMerchantId = GetNullableObjectAtIndex(list, 3);
  pigeonResult.applePayMerchantName = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable LyraInitializeOptionsInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [LyraInitializeOptionsInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.apiServerName ?: [NSNull null]),
    (self.nfcEnabled ?: [NSNull null]),
    (self.cardScanningEnabled ?: [NSNull null]),
    (self.applePayMerchantId ?: [NSNull null]),
    (self.applePayMerchantName ?: [NSNull null]),
  ];
}
@end

@implementation LyraKeyInterface
+ (instancetype)makeWithPublicKey:(NSString *)publicKey
    options:(LyraInitializeOptionsInterface *)options {
  LyraKeyInterface* pigeonResult = [[LyraKeyInterface alloc] init];
  pigeonResult.publicKey = publicKey;
  pigeonResult.options = options;
  return pigeonResult;
}
+ (LyraKeyInterface *)fromList:(NSArray *)list {
  LyraKeyInterface *pigeonResult = [[LyraKeyInterface alloc] init];
  pigeonResult.publicKey = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.publicKey != nil, @"");
  pigeonResult.options = [LyraInitializeOptionsInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.options != nil, @"");
  return pigeonResult;
}
+ (nullable LyraKeyInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [LyraKeyInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.publicKey ?: [NSNull null]),
    (self.options ? [self.options toList] : [NSNull null]),
  ];
}
@end

@implementation ProcessRequestInterface
+ (instancetype)makeWithFormToken:(NSString *)formToken
    errorCodes:(ErrorCodesInterface *)errorCodes
    timeoutInSeconds:(nullable NSNumber *)timeoutInSeconds {
  ProcessRequestInterface* pigeonResult = [[ProcessRequestInterface alloc] init];
  pigeonResult.formToken = formToken;
  pigeonResult.errorCodes = errorCodes;
  pigeonResult.timeoutInSeconds = timeoutInSeconds;
  return pigeonResult;
}
+ (ProcessRequestInterface *)fromList:(NSArray *)list {
  ProcessRequestInterface *pigeonResult = [[ProcessRequestInterface alloc] init];
  pigeonResult.formToken = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.formToken != nil, @"");
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  pigeonResult.timeoutInSeconds = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable ProcessRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ProcessRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.formToken ?: [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
    (self.timeoutInSeconds ?: [NSNull null]),
  ];
}
@end

@interface LyraHostApiCodecReader : FlutterStandardReader
@end
@implementation LyraHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [ErrorCodesInterface fromList:[self readValue]];
    case 129: 
      return [LyraInitializeOptionsInterface fromList:[self readValue]];
    case 130: 
      return [LyraKeyInterface fromList:[self readValue]];
    case 131: 
      return [ProcessRequestInterface fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface LyraHostApiCodecWriter : FlutterStandardWriter
@end
@implementation LyraHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ErrorCodesInterface class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LyraInitializeOptionsInterface class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LyraKeyInterface class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ProcessRequestInterface class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface LyraHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation LyraHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[LyraHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[LyraHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *LyraHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    LyraHostApiCodecReaderWriter *readerWriter = [[LyraHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void LyraHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LyraHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LyraHostApi.initialize"
        binaryMessenger:binaryMessenger
        codec:LyraHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeLyraKey:completion:)], @"LyraHostApi api (%@) doesn't respond to @selector(initializeLyraKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LyraKeyInterface *arg_lyraKey = GetNullableObjectAtIndex(args, 0);
        [api initializeLyraKey:arg_lyraKey completion:^(LyraKeyInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LyraHostApi.getFormTokenVersion"
        binaryMessenger:binaryMessenger
        codec:LyraHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getFormTokenVersionWithCompletion:)], @"LyraHostApi api (%@) doesn't respond to @selector(getFormTokenVersionWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getFormTokenVersionWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LyraHostApi.process"
        binaryMessenger:binaryMessenger
        codec:LyraHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(processRequest:completion:)], @"LyraHostApi api (%@) doesn't respond to @selector(processRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ProcessRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api processRequest:arg_request completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
